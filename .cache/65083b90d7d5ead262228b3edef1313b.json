{"dependencies":[],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.burst = burst;\nexports.initEmitter = initEmitter;\n// some defaults\n\n//const particles = [];\n// const numParticles = 10\n//const emitRate = 10;\n//const emitBurstNum = 10;\n//const continous = 1;\n//const doBurst = false;\n//let counter = 0;\n// let ctx;\n// let canvas;\n\nvar state = {\n  emitRate: 10,\n  particles: [],\n  emitBurstNum: 10,\n  continous: 1,\n  doBurst: false,\n  counter: 0\n};\n// Generate a random rgba color for the particle\nfunction getRandomColor() {\n  var r = 0;\n  var g = 0;\n  var b = 0;\n  while (r < 100 && g < 100 && b < 100) {\n    r = Math.floor(Math.random() * 256);\n    g = Math.floor(Math.random() * 256);\n    b = Math.floor(Math.random() * 256);\n  }\n  return \"rgba(\" + r + \",\" + g + \",\" + b + \",0.6)\";\n}\n// utilityfunction to get random numbers within a range\nfunction getRandomInt(min, max) {\n  var nMin = Math.ceil(min);\n  var nMax = Math.floor(max);\n  return Math.floor(Math.random() * (nMax - nMin)) + nMin;\n  // The maximum is exclusive and the minimum is inclusive\n}\n// get random starting positions\nfunction getRandomStart(_ref) {\n  var canvas = _ref.canvas;\n\n  return {\n    x: canvas.width * Math.random(),\n    y: canvas.height * Math.random()\n  };\n}\n\nvar particle = function particle(obj) {\n  var defaultState = {\n    x: state.canvas.width / 2, // canvas.width * Math.random();\n    y: state.canvas.height / 2, // canvas.height * Math.random();\n    vx: 4 * Math.random() - 2,\n    vy: 4 * Math.random() - 2,\n    color: getRandomColor(),\n    age: 0,\n    maxAge: getRandomInt(10, 100),\n    bounce: false,\n    gravity: 0,\n    emitRate: 200,\n    damping: 0.95,\n    radius: 2,\n    grow: 1.02,\n    shape: 'dot'\n  };\n\n  var innerState = Object.assign(defaultState, obj);\n  // const innerState = { ...defaultState, ...obj };\n  var checkBounce = function checkBounce(posX, posY) {\n    posX < 0 || posX > state.canvas.width ? innerState.vx = -innerState.vx : innerState.vx;\n    posY < 0 || posY > state.canvas.height ? innerState.vy = -innerState.vy : innerState.vy;\n  };\n\n  function draw() {\n    var ctx = innerState.ctx,\n        shape = innerState.shape; // console.log(innerState.shape);\n\n    if (shape === 'dot') {\n      ctx.fillStyle = innerState.color;\n      ctx.fillRect(innerState.x, innerState.y, 4, 4);\n    }\n    if (shape === 'ball') {\n      ctx.beginPath();\n      ctx.arc(innerState.x, innerState.y, innerState.radius, 0, 2 * Math.PI, false);\n      ctx.fill();\n      ctx.fillStyle = innerState.color; // 'rgba(0,255,0,0.3)';\n      ctx.lineWidth = 0;\n      // ctx.strokeStyle = color;\n      // ctx.stroke();\n    }\n  }\n\n  function update() {\n\n    innerState.vy += innerState.gravity;\n    innerState.vx *= innerState.damping;\n    innerState.vy *= innerState.damping;\n    innerState.x += innerState.vx;\n    innerState.y += innerState.vy;\n    innerState.radius *= innerState.grow;\n    // if true bounce on edges\n    innerState.bounce ? checkBounce(innerState.x, innerState.y) : null;\n  }\n\n  var die = function die() {\n    return innerState.age++ > innerState.maxAge;\n  };\n\n  return {\n    // reset counter\n    counter: 0,\n    // draw the particle\n    draw: draw,\n    // update the particle\n    update: update,\n    // if old enough set die to true\n    die: die\n  };\n};\n\nfunction loop() {\n  //console.log(state);\n  var canvas = state.canvas,\n      ctx = state.ctx,\n      emitRate = state.emitRate;\n  //console.log(canvas, `the context: ${ctx}`);\n\n  if (state.continous) {\n    // console.log(`the counter: ${  counter}`);\n    state.counter += 1;\n    if (state.counter > emitRate) {\n      if (state.doBurst) {\n        burst(getRandomInt(state.emitBurstNum, 100), Object.assign(state, getRandomStart(state), {\n          bounce: false,\n          gravity: 0.03,\n          damping: 0.99,\n          shape: 'dot'\n        }));\n      }\n      state.counter -= state.counter;\n      state.particles.push(particle(state));\n    }\n  }\n\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  state.particles.filter(function (part) {\n    return !part.dead;\n  }).forEach(function (part) {\n    part.update();\n    part.draw();\n    if (part.die()) {\n      part.dead = true;\n    }\n  });\n\n  requestAnimationFrame(loop);\n}\n\nfunction burst(numParticles, obj) {\n  for (var i = 0; i < numParticles; i++) {\n    particles.push(particle(obj));\n  } // particles = [...Array(numParticles)].map(part => particle(obj))\n}\n\nfunction initEmitter(canvas) {\n  var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!canvas.nodeName) {\n    console.error('canvas not set, no canvas, no particles :(');\n    return JSON.stringify({ ok: false, state: 'no canvas, no particles :(' });\n  }\n  // debugger\n  // console.log(`canvas called ${canvas}`);\n  Object.assign(state, settings, {\n    canvas: canvas,\n    ctx: canvas.getContext('2d')\n    // console.log(`context called ${state.ctx}`);\n  });\n  state.canvas.width = window.innerWidth;\n  state.canvas.height = window.innerHeight;\n  // console.log(state);\n  loop();\n  return state;\n}"},"hash":"f2d4b2be73c86a23ad5d32b1e75aab06"}