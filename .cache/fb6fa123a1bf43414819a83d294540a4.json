{"dependencies":[],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar particleS = exports.particleS = function particleS() {\n  var canvas = document.getElementById('canvas');\n  var ctx = canvas.getContext('2d');\n  canvas.width = window.innerWidth;\n  canvas.height = window.innerHeight;\n  var particles = [];\n  //const numParticles = 10\n  var emitRate = 20;\n  var emitBurstNum = 10;\n  var continous = 1;\n  var counter = 0;\n\n  function getRandomColor() {\n    var r = 0;\n    var g = 0;\n    var b = 0;\n    while (r < 100 && g < 100 && b < 100) {\n      r = Math.floor(Math.random() * 256);\n      g = Math.floor(Math.random() * 256);\n      b = Math.floor(Math.random() * 256);\n    }\n\n    return \"(rgb('\" + r + \",\" + g + \",\" + b + \"')\";\n  }\n  function getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n  }\n\n  window.addEventListener('click', clickBurst);\n\n  window.addEventListener('touchstart', clickBurst);\n\n  function clickBurst(e) {\n    //console.log(e);\n    var x = e.clientX || e.touches[0].clientX;\n    var y = e.clientY || e.touches[0].clientY;\n    //spawnNew({x, y}, numParticles);\n    burst(10, { x: x, y: y, damping: 0.9, shape: 'dot' });\n  }\n\n  function burst(numParticles, obj) {\n    //console.log(obj)\n    //particles = [];\n    for (var i = 0; i < numParticles; i++) {\n      particles.push(particle(obj));\n    } //particles = [...Array(numParticles)].map(part => particle(obj))\n    //console.log(particles)\n  }\n\n  function startEmitter() {\n    //let setup = Object.assign(obj, {gravity: 0.02, bounce: false});\n    //burst(10, setup);\n    loop();\n  }\n\n  var particle = function particle(context, obj) {\n    var defaults = {\n      x: canvas.width / 2, // canvas.width * Math.random();\n      y: canvas.height / 2, //canvas.height * Math.random();\n      vx: 4 * Math.random() - 2,\n      vy: 4 * Math.random() - 2,\n      color: getRandomColor(),\n      age: 0,\n      maxAge: getRandomInt(10, 100),\n      bounce: false,\n      gravity: 0,\n      emitRate: 200,\n      damping: 0.95,\n      radius: 2,\n      grow: 1.02\n\n      // create variables adding passed object parameters to defaults\n      /* let {\n        x,\n        y,\n        vx,\n        vy,\n        gravity,\n        bounce,\n        damping,\n        age,\n        maxAge,\n        color,\n        radius,\n        grow,\n      } = Object.assign(defaults, obj) */\n\n    };var data = Object.assign(defaults, obj);\n\n    var checkBounce = function checkBounce(posX, posY) {\n      posX < 0 || posX > canvas.width ? data.vx = -data.vx : data.vx;\n      posY < 0 || posY > canvas.height ? data.vy = -data.vy : data.vy;\n    };\n\n    function draw() {\n      var c = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : context;\n      var shape = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'dot';\n\n      if (shape === 'dot') {\n        c.fillStyle = data.color;\n        c.fillRect(data.x, data.y, 4, 4);\n      }\n      if (shape === 'ball') {\n        c.beginPath();\n        c.arc(data.x, data.y, data.radius, 0, 2 * Math.PI, false);\n        c.fill();\n        c.fillStyle = 'rgba(0,255,0,0.3)';\n        c.lineWidth = 0;\n        //ctx.strokeStyle = color;\n        //ctx.stroke();\n      }\n    }\n\n    function update() {\n      data.vy += data.gravity;\n      data.vx *= data.damping;\n      data.vy *= data.damping;\n      data.x += data.vx;\n      data.y += data.vy;\n      data.radius *= data.grow;\n      // if true bounce on edges\n      data.bounce ? checkBounce(data.x, data.y) : null;\n    }\n\n    var die = function die() {\n      return data.age++ > data.maxAge;\n    };\n\n    return {\n      //reset counter\n      counter: 0,\n      // draw the particle\n      draw: draw,\n      //update the particle\n      update: update,\n      // if old enough set die to true\n      die: die\n    };\n  };\n\n  function loop() {\n    if (continous) {\n      if (counter++ > emitRate) {\n        burst(getRandomInt(emitBurstNum, 100), {\n          x: canvas.width * Math.random(),\n          y: canvas.height * Math.random(),\n          bounce: true,\n          gravity: 0.03,\n          damping: 0.99\n        });\n        counter = 0;\n      }\n    }\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    particles.filter(function (part) {\n      return !part.dead;\n    }).forEach(function (part) {\n      part.update();\n      part.draw(ctx, 'ball');\n      if (part.die()) {\n        part.dead = true;\n      }\n    });\n\n    requestAnimationFrame(loop);\n  }\n\n  //initialize particles\n  startEmitter();\n};"},"hash":"a152d1722c6e45e1bed6e5abd9f81938"}